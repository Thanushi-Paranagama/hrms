from django import forms
from django.contrib.auth.models import User
from .models import Department, Employee
from django.core.validators import RegexValidator


class EmployeeCreateForm(forms.Form):
    username = forms.CharField(max_length=150)
    email = forms.EmailField()
    first_name = forms.CharField(max_length=150)
    last_name = forms.CharField(max_length=150)
    password = forms.CharField(min_length=8)

    employee_id = forms.CharField(max_length=20, required=False)
    department_id = forms.IntegerField()
    role = forms.ChoiceField(choices=Employee.ROLE_CHOICES, initial='EMPLOYEE')
    date_of_birth = forms.DateField(required=False)

    phone_regex = RegexValidator(regex=r'^\+?1?\d{9,15}$')
    phone_number = forms.CharField(required=False, validators=[phone_regex], max_length=17)
    emergency_contact = forms.CharField(required=False, max_length=17)
    address = forms.CharField(required=False, widget=forms.Textarea)

    floor_number = forms.IntegerField(required=False)
    cabin_number = forms.CharField(required=False, max_length=20)
    salary_base = forms.DecimalField(required=False, max_digits=10, decimal_places=2)

    def clean_username(self):
        username = self.cleaned_data['username']
        if User.objects.filter(username=username).exists():
            raise forms.ValidationError('Username already exists')
        return username

    def clean_email(self):
        email = self.cleaned_data['email']
        if User.objects.filter(email=email).exists():
            raise forms.ValidationError('Email already in use')
        return email

    def clean_employee_id(self):
        emp_id = self.cleaned_data.get('employee_id')
        # allow empty employee_id (will be autogenerated in view)
        if not emp_id:
            return ''
        if Employee.objects.filter(employee_id=emp_id).exists():
            raise forms.ValidationError('Employee ID already exists')
        return emp_id

    def clean_department_id(self):
        dept_id = self.cleaned_data['department_id']
        try:
            dept = Department.objects.get(id=dept_id)
        except Department.DoesNotExist:
            raise forms.ValidationError('Selected department does not exist')
        return dept_id
